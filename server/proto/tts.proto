syntax = "proto3";
package tts;

// Top-level message wrapper with oneof to handle all message types
message SendMessage {
  string session = 1;
  oneof payload {
    StartSession start_session = 2;
    PushText push_text = 3;
    Eos eos = 4;
  }
}

message ReceiveMessage {
  string session = 1;
  oneof payload {
    AudioData audio_data = 2;
    Finished finished = 3;
    Error error = 4;
  }
}

message StartSession {
  string voice = 1;
}

message PushText {
  string text = 2;
}

message Eos {
}

// Server-to-client messages
message AudioData {
  bytes audio = 1;
  int32 sample_rate = 2;
  AudioType audio_type = 3;
  int32 channel_count = 4;
}

message Finished {
}

enum AudioType {
  AUDIOTYPE_PCM16LE = 0;
}

message Error {
  string session = 1;
  string message = 2;
}